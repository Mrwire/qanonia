generator client {
  provider = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  MANAGER
  CLIENT
}

enum CaseStatus {
  DRAFT
  REVIEW
  SIGN
  ARCHIVED
}

enum DocumentKind {
  CONTRACT
  PV
  STATUTE
}

enum SignatureMethod {
  advanced
  qualified
}

enum InvoiceStatus {
  DRAFT
  SENT
  PAID
  FAILED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  SUCCEEDED
  FAILED
}

enum TaskStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

model Org {
  id              String   @id @default(cuid())
  name            String
  billingProfile  Json?
  complianceFlags Json?
  locale          String   @default("fr")
  timezone        String   @default("Africa/Casablanca")
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  users           User[]
  clients         Client[]
  cases           Case[]
  templates       Template[]
  invoices        Invoice[]
  workflows       Workflow[]
  auditLogs       AuditLog[]
}

model User {
  id                 String   @id @default(cuid())
  email              String   @unique
  passwordHash       String
  locale             String   @default("fr")
  role               UserRole @default(CLIENT)
  orgId              String
  org                Org      @relation(fields: [orgId], references: [id])
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  lastLoginAt        DateTime?
  sessions           Json?
  auditLogs          AuditLog[] @relation("AuditLogActor")
  assignedCases      Case[]     @relation("CaseAssignees")
  tasks              Task[]
}

model Client {
  id        String   @id @default(cuid())
  orgId     String
  org       Org      @relation(fields: [orgId], references: [id])
  identity  Json
  contacts  Json?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  cases     Case[]
}

model Case {
  id          String      @id @default(cuid())
  orgId       String
  org         Org         @relation(fields: [orgId], references: [id])
  clientId    String
  client      Client      @relation(fields: [clientId], references: [id])
  title       String
  status      CaseStatus  @default(DRAFT)
  assignees   User[]      @relation("CaseAssignees", references: [id])
  deadlines   Json?
  metadata    Json?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  documents   Document[]
  signatureRequests SignatureRequest[]
  tasks       Task[]
  invoices    Invoice[]
  auditLogs   AuditLog[]
}

model Document {
  id          String    @id @default(cuid())
  caseId      String
  case        Case      @relation(fields: [caseId], references: [id])
  templateId  String?
  template    Template? @relation(fields: [templateId], references: [id])
  version     Int       @default(1)
  storageKey  String
  hash        String
  metadata    Json?
  language    String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  signatureRequests SignatureRequest[]
}

model Template {
  id              String        @id @default(cuid())
  orgId           String
  org             Org           @relation(fields: [orgId], references: [id])
  name            String
  kind            DocumentKind
  variablesSchema Json
  body            String
  language        String        @default("fr")
  version         Int           @default(1)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  documents       Document[]
}

model SignatureRequest {
  id             String          @id @default(cuid())
  caseId         String
  case           Case            @relation(fields: [caseId], references: [id])
  documentId     String
  document       Document        @relation(fields: [documentId], references: [id])
  signers        Json
  method         SignatureMethod
  status         String          @default("PENDING")
  evidences      Json?
  auditTrailUrl  String?
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
}

model Invoice {
  id        String        @id @default(cuid())
  orgId     String
  org       Org           @relation(fields: [orgId], references: [id])
  caseId    String?
  case      Case?          @relation(fields: [caseId], references: [id])
  amount    Decimal        @db.Decimal(12, 2)
  currency  String         @default("MAD")
  status    InvoiceStatus  @default(DRAFT)
  dueDate   DateTime?
  pdfKey    String?
  metadata  Json?
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  payments  Payment[]
}

model Payment {
  id         String        @id @default(cuid())
  invoiceId  String
  invoice    Invoice       @relation(fields: [invoiceId], references: [id])
  provider   String
  status     PaymentStatus @default(PENDING)
  txRef      String?
  payload    Json?
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt
}

model Workflow {
  id           String   @id @default(cuid())
  orgId        String
  org          Org      @relation(fields: [orgId], references: [id])
  name         String
  states       Json
  transitions  Json
  guards       Json?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Task {
  id         String    @id @default(cuid())
  caseId     String
  case       Case      @relation(fields: [caseId], references: [id])
  type       String
  assigneeId String?
  assignee   User?     @relation(fields: [assigneeId], references: [id])
  dueAt      DateTime?
  status     TaskStatus @default(PENDING)
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
}

model AuditLog {
  id         String   @id @default(cuid())
  actorId    String?
  actor      User?    @relation("AuditLogActor", fields: [actorId], references: [id])
  orgId      String
  org        Org      @relation(fields: [orgId], references: [id])
  entityType String
  entityId   String
  action     String
  before     Json?
  after      Json?
  ip         String?
  userAgent  String?
  createdAt  DateTime @default(now())
}

model Notification {
  id         String   @id @default(cuid())
  orgId      String
  org        Org      @relation(fields: [orgId], references: [id])
  userId     String?
  user       User?    @relation(fields: [userId], references: [id])
  channel    String
  payload    Json
  readAt     DateTime?
  createdAt  DateTime @default(now())
}

model FileAsset {
  id          String   @id @default(cuid())
  storageKey  String   @unique
  bucket      String
  hash        String
  metadata    Json?
  createdAt   DateTime @default(now())
}
